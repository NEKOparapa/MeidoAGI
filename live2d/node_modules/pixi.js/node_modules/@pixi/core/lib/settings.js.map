{"version":3,"file":"settings.js","sources":["../src/settings.ts"],"sourcesContent":["import { ENV } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { deprecation } from '@pixi/utils';\nimport { BatchRenderer } from './batch/BatchRenderer';\nimport { Filter } from './filters/Filter';\nimport { Program } from './shader/Program';\nimport { BackgroundSystem, ContextSystem, StartupSystem, TextureGCSystem, ViewSystem } from './systems';\nimport { BaseTexture } from './textures/BaseTexture';\n\nimport type { GC_MODES, MIPMAP_MODES, MSAA_QUALITY, PRECISION, SCALE_MODES, WRAP_MODES } from '@pixi/constants';\n\n/**\n * The maximum support for using WebGL. If a device does not\n * support WebGL version, for instance WebGL 2, it will still\n * attempt to fallback support to WebGL 1. If you want to\n * explicitly remove feature support to target a more stable\n * baseline, prefer a lower environment.\n * @static\n * @name PREFER_ENV\n * @memberof PIXI.settings\n * @type {number}\n * @default PIXI.ENV.WEBGL2\n */\nsettings.PREFER_ENV = ENV.WEBGL2;\n\n/**\n * If set to `true`, *only* Textures and BaseTexture objects stored\n * in the caches ({@link PIXI.utils.TextureCache TextureCache} and\n * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be\n * used when calling {@link PIXI.Texture.from Texture.from} or\n * {@link PIXI.BaseTexture.from BaseTexture.from}.\n * Otherwise, these `from` calls throw an exception. Using this property\n * can be useful if you want to enforce preloading all assets with\n * {@link PIXI.Assets Loader}.\n * @static\n * @name STRICT_TEXTURE_CACHE\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.STRICT_TEXTURE_CACHE = false;\n\n/**\n * The default render options if none are supplied to {@link PIXI.Renderer}\n * or {@link PIXI.CanvasRenderer}.\n * @static\n * @name RENDER_OPTIONS\n * @memberof PIXI.settings\n * @type {PIXI.IRendererOptions}\n */\nsettings.RENDER_OPTIONS = {\n    ...ContextSystem.defaultOptions,\n    ...BackgroundSystem.defaultOptions,\n    ...ViewSystem.defaultOptions,\n    ...StartupSystem.defaultOptions,\n};\n\nObject.defineProperties(settings, {\n    /**\n     * @static\n     * @name WRAP_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.WRAP_MODES}\n     * @deprecated since 7.1.0\n     * @see PIXI.BaseTexture.defaultOptions.wrapMode\n     */\n    WRAP_MODE: {\n        get()\n        {\n            return BaseTexture.defaultOptions.wrapMode;\n        },\n        set(value: WRAP_MODES)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.WRAP_MODE is deprecated, use BaseTexture.defaultOptions.wrapMode');\n            // #endif\n            BaseTexture.defaultOptions.wrapMode = value;\n        },\n    },\n\n    /**\n     * @static\n     * @name SCALE_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.SCALE_MODES}\n     * @deprecated since 7.1.0\n     * @see PIXI.BaseTexture.defaultOptions.scaleMode\n     */\n    SCALE_MODE: {\n        get()\n        {\n            return BaseTexture.defaultOptions.scaleMode;\n        },\n        set(value: SCALE_MODES)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.SCALE_MODE is deprecated, use BaseTexture.defaultOptions.scaleMode');\n            // #endif\n            BaseTexture.defaultOptions.scaleMode = value;\n        },\n    },\n\n    /**\n     * @static\n     * @name MIPMAP_TEXTURES\n     * @memberof PIXI.settings\n     * @type {PIXI.MIPMAP_MODES}\n     * @deprecated since 7.1.0\n     * @see PIXI.BaseTexture.defaultOptions.mipmap\n     */\n    MIPMAP_TEXTURES:\n    {\n        get()\n        {\n            return BaseTexture.defaultOptions.mipmap;\n        },\n        set(value: MIPMAP_MODES)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.MIPMAP_TEXTURES is deprecated, use BaseTexture.defaultOptions.mipmap');\n            // #endif\n            BaseTexture.defaultOptions.mipmap = value;\n        },\n        // MIPMAP_MODES.POW2,\n    },\n\n    /**\n     * @static\n     * @name ANISOTROPIC_LEVEL\n     * @memberof PIXI.settings\n     * @type {number}\n     * @deprecated since 7.1.0\n     * @see PIXI.BaseTexture.defaultOptions.anisotropicLevel\n     */\n    ANISOTROPIC_LEVEL:\n    {\n        get()\n        {\n            return BaseTexture.defaultOptions.anisotropicLevel;\n        },\n        set(value: number)\n        {\n            // #if _DEBUG\n            deprecation(\n                '7.1.0', 'settings.ANISOTROPIC_LEVEL is deprecated, use BaseTexture.defaultOptions.anisotropicLevel');\n            // #endif\n            BaseTexture.defaultOptions.anisotropicLevel = value;\n        },\n\n    },\n    /**\n     * Default filter resolution.\n     * @static\n     * @name FILTER_RESOLUTION\n     * @memberof PIXI.settings\n     * @deprecated since 7.1.0\n     * @type {number}\n     * @see PIXI.Filter.defaultResolution\n     */\n    FILTER_RESOLUTION: {\n        get()\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.FILTER_RESOLUTION is deprecated, use Filter.defaultResolution');\n            // #endif\n\n            return Filter.defaultResolution;\n        },\n        set(value)\n        {\n            Filter.defaultResolution = value;\n        },\n    },\n\n    /**\n     * Default filter samples.\n     * @static\n     * @name FILTER_MULTISAMPLE\n     * @memberof PIXI.settings\n     * @deprecated since 7.1.0\n     * @type {PIXI.MSAA_QUALITY}\n     * @see PIXI.Filter.defaultMultisample\n     */\n    FILTER_MULTISAMPLE: {\n        get()\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.FILTER_MULTISAMPLE is deprecated, use Filter.defaultMultisample');\n            // #endif\n\n            return Filter.defaultMultisample;\n        },\n        set(value: MSAA_QUALITY)\n        {\n            Filter.defaultMultisample = value;\n        },\n    },\n\n    /**\n     * The maximum textures that this device supports.\n     * @static\n     * @name SPRITE_MAX_TEXTURES\n     * @memberof PIXI.settings\n     * @deprecated since 7.1.0\n     * @see PIXI.BatchRenderer.defaultMaxTextures\n     * @type {number}\n     */\n    SPRITE_MAX_TEXTURES: {\n        get()\n        {\n            return BatchRenderer.defaultMaxTextures;\n        },\n        set(value: number)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.SPRITE_MAX_TEXTURES is deprecated, use BatchRenderer.defaultMaxTextures');\n            // #endif\n            BatchRenderer.defaultMaxTextures = value;\n        },\n    },\n\n    /**\n     * The default sprite batch size.\n     *\n     * The default aims to balance desktop and mobile devices.\n     * @static\n     * @name SPRITE_BATCH_SIZE\n     * @memberof PIXI.settings\n     * @see PIXI.BatchRenderer.defaultBatchSize\n     * @deprecated since 7.1.0\n     * @type {number}\n     */\n    SPRITE_BATCH_SIZE: {\n        get()\n        {\n            return BatchRenderer.defaultBatchSize;\n        },\n        set(value: number)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.SPRITE_BATCH_SIZE is deprecated, use BatchRenderer.defaultBatchSize');\n            // #endif\n            BatchRenderer.defaultBatchSize = value;\n        },\n    },\n\n    /**\n     * Can we upload the same buffer in a single frame?\n     * @static\n     * @name CAN_UPLOAD_SAME_BUFFER\n     * @memberof PIXI.settings\n     * @see PIXI.BatchRenderer.canUploadSameBuffer\n     * @deprecated since 7.1.0\n     * @type {boolean}\n     */\n    CAN_UPLOAD_SAME_BUFFER: {\n        get()\n        {\n            return BatchRenderer.canUploadSameBuffer;\n        },\n        set(value: boolean)\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation('7.1.0', 'settings.CAN_UPLOAD_SAME_BUFFER is deprecated, use BatchRenderer.canUploadSameBuffer');\n            // #endif\n            BatchRenderer.canUploadSameBuffer = value;\n        },\n    },\n\n    /**\n     * Default Garbage Collection mode.\n     * @static\n     * @name GC_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.GC_MODES}\n     * @deprecated since 7.1.0\n     * @see PIXI.TextureGCSystem.defaultMode\n     */\n    GC_MODE: {\n        get()\n        {\n            return TextureGCSystem.defaultMode;\n        },\n        set(value: GC_MODES)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.GC_MODE is deprecated, use TextureGCSystem.defaultMode');\n            // #endif\n            TextureGCSystem.defaultMode = value;\n        },\n    },\n\n    /**\n     * Default Garbage Collection max idle.\n     * @static\n     * @name GC_MAX_IDLE\n     * @memberof PIXI.settings\n     * @type {number}\n     * @deprecated since 7.1.0\n     * @see PIXI.TextureGCSystem.defaultMaxIdle\n     */\n    GC_MAX_IDLE: {\n        get()\n        {\n            return TextureGCSystem.defaultMaxIdle;\n        },\n        set(value: number)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.GC_MAX_IDLE is deprecated, use TextureGCSystem.defaultMaxIdle');\n            // #endif\n            TextureGCSystem.defaultMaxIdle = value;\n        },\n    },\n\n    /**\n     * Default Garbage Collection maximum check count.\n     * @static\n     * @name GC_MAX_CHECK_COUNT\n     * @memberof PIXI.settings\n     * @type {number}\n     * @deprecated since 7.1.0\n     * @see PIXI.TextureGCSystem.defaultCheckCountMax\n     */\n    GC_MAX_CHECK_COUNT: {\n        get()\n        {\n            return TextureGCSystem.defaultCheckCountMax;\n        },\n        set(value: number)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.GC_MAX_CHECK_COUNT is deprecated, use TextureGCSystem.defaultCheckCountMax');\n            // #endif\n            TextureGCSystem.defaultCheckCountMax = value;\n        },\n    },\n\n    /**\n     * Default specify float precision in vertex shader.\n     * @static\n     * @name PRECISION_VERTEX\n     * @memberof PIXI.settings\n     * @type {PIXI.PRECISION}\n     * @deprecated since 7.1.0\n     * @see PIXI.Program.defaultVertexPrecision\n     */\n    PRECISION_VERTEX: {\n        get()\n        {\n            return Program.defaultVertexPrecision;\n        },\n        set(value: PRECISION)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.PRECISION_VERTEX is deprecated, use Program.defaultVertexPrecision');\n            // #endif\n            Program.defaultVertexPrecision = value;\n        },\n    },\n\n    /**\n     * Default specify float precision in fragment shader.\n     * @static\n     * @name PRECISION_FRAGMENT\n     * @memberof PIXI.settings\n     * @type {PIXI.PRECISION}\n     * @deprecated since 7.1.0\n     * @see PIXI.Program.defaultFragmentPrecision\n     */\n    PRECISION_FRAGMENT: {\n        get()\n        {\n            return Program.defaultFragmentPrecision;\n        },\n        set(value: PRECISION)\n        {\n            // #if _DEBUG\n            deprecation('7.1.0', 'settings.PRECISION_FRAGMENT is deprecated, use Program.defaultFragmentPrecision');\n            // #endif\n            Program.defaultFragmentPrecision = value;\n        },\n    },\n});\n"],"names":["settings","ENV","ContextSystem","BackgroundSystem","ViewSystem","StartupSystem","BaseTexture","deprecation","Filter","BatchRenderer","TextureGCSystem","Program"],"mappings":"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"}