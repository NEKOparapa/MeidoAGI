{"version":3,"file":"const.mjs","sources":["../src/const.ts"],"sourcesContent":["/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n * @memberof PIXI\n * @static\n * @enum {string}\n */\nexport enum LINE_JOIN\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 'miter': make a sharp corner where outer part of lines meet\n     * @default miter\n     */\n    MITER = 'miter',\n    /**\n     * 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n     * @default bevel\n     */\n    BEVEL = 'bevel',\n    /**\n     * 'round': add an arc at the joint\n     * @default round\n     */\n    ROUND = 'round'\n}\n\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @memberof PIXI\n * @static\n * @enum {string}\n */\nexport enum LINE_CAP\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 'butt': don't add any cap at line ends (leaves orthogonal edges)\n     * @default butt\n     */\n    BUTT = 'butt',\n    /**\n     * 'round': add semicircle at ends\n     * @default round\n     */\n    ROUND = 'round',\n    /**\n     * 'square': add square at end (like `BUTT` except more length at end)\n     * @default square\n     */\n    SQUARE = 'square'\n}\n\n/**\n * @memberof PIXI\n * @deprecated\n */\nexport interface IGraphicsCurvesSettings\n{\n    adaptive: boolean;\n    maxLength: number;\n    minSegments: number;\n    maxSegments: number;\n\n    epsilon: number;\n\n    _segmentsCount(length: number, defaultSegments?: number): number;\n}\n\n/**\n * @private\n */\nexport const curves = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments:  2048,\n\n    epsilon: 0.0001,\n\n    _segmentsCount(length: number, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n\n/**\n * @static\n * @readonly\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @deprecated since 7.1.0\n * @see PIXI.Graphics.curves\n */\nexport const GRAPHICS_CURVES = curves;\n"],"names":[],"mappings":"AAQY,IAAA,SAAA,qBAAA,UAAL,KAAA;AAOH,EAAQ,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA,CAAA;AAKR,EAAQ,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA,CAAA;AAKR,EAAQ,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA,CAAA;AAjBA,EAAA,OAAA,UAAA,CAAA;AAAA,CAAA,EAAA,SAAA,IAAA,EAAA,EAAA;AA2BA,IAAA,QAAA,qBAAA,SAAL,KAAA;AAOH,EAAO,SAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;AAKP,EAAQ,SAAA,CAAA,OAAA,CAAA,GAAA,OAAA,CAAA;AAKR,EAAS,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;AAjBD,EAAA,OAAA,SAAA,CAAA;AAAA,CAAA,EAAA,QAAA,IAAA,EAAA,EAAA;AAuCL,MAAM,MAAS,GAAA;AAAA,EAClB,QAAU,EAAA,IAAA;AAAA,EACV,SAAW,EAAA,EAAA;AAAA,EACX,WAAa,EAAA,CAAA;AAAA,EACb,WAAc,EAAA,IAAA;AAAA,EAEd,OAAS,EAAA,IAAA;AAAA,EAET,cAAA,CAAe,MAAgB,EAAA,eAAA,GAAkB,EACjD,EAAA;AACI,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA,IAAY,CAAC,MAAU,IAAA,KAAA,CAAM,MAAM,CAC7C,EAAA;AACI,MAAO,OAAA,eAAA,CAAA;AAAA,KACX;AAEA,IAAA,IAAI,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,GAAS,KAAK,SAAS,CAAA,CAAA;AAE9C,IAAI,IAAA,MAAA,GAAS,KAAK,WAClB,EAAA;AACI,MAAA,MAAA,GAAS,IAAK,CAAA,WAAA,CAAA;AAAA,KAClB,MAAA,IACS,MAAS,GAAA,IAAA,CAAK,WACvB,EAAA;AACI,MAAA,MAAA,GAAS,IAAK,CAAA,WAAA,CAAA;AAAA,KAClB;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,GACX;AACJ,EAAA;AAWO,MAAM,eAAkB,GAAA;;;;"}