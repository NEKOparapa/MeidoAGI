{"version":3,"file":"premultiply.js","sources":["../../src/color/premultiply.ts"],"sourcesContent":["import { Color } from '@pixi/color';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { deprecation } from '../logging/deprecation';\n\n/**\n * Corrects PixiJS blend, takes premultiplied alpha into account\n * @memberof PIXI.utils\n * @function mapPremultipliedBlendModes\n * @private\n * @returns {Array<number[]>} Mapped modes.\n */\nfunction mapPremultipliedBlendModes(): number[][]\n{\n    const pm = [];\n    const npm = [];\n\n    for (let i = 0; i < 32; i++)\n    {\n        pm[i] = i;\n        npm[i] = i;\n    }\n\n    pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;\n    pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;\n    pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;\n\n    npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;\n    npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;\n    npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n\n    const array: number[][] = [];\n\n    array.push(npm);\n    array.push(pm);\n\n    return array;\n}\n\n/**\n * maps premultiply flag and blendMode to adjusted blendMode\n * @memberof PIXI.utils\n * @type {Array<number[]>}\n */\nexport const premultiplyBlendMode = mapPremultipliedBlendModes();\n\n/**\n * changes blendMode according to texture format\n * @memberof PIXI.utils\n * @function correctBlendMode\n * @param {number} blendMode - supposed blend mode\n * @param {boolean} premultiplied - whether source is premultiplied\n * @returns {number} true blend mode for this texture\n */\nexport function correctBlendMode(blendMode: number, premultiplied: boolean): number\n{\n    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyRgba\n * @deprecated since 7.2.0\n * @see PIXI.Color.premultiply\n * @param {Float32Array|number[]} rgb -\n * @param {number} alpha -\n * @param {Float32Array} [out] -\n * @param {boolean} [premultiply=true] -\n */\nexport function premultiplyRgba(\n    rgb: Float32Array | number[],\n    alpha: number,\n    out?: Float32Array,\n    premultiply = true\n): Float32Array\n{\n    // #if _DEBUG\n    deprecation('7.2.0', `utils.premultiplyRgba has moved to Color.premultiply`);\n    // #endif\n\n    return Color.shared\n        .setValue(rgb)\n        .premultiply(alpha, premultiply)\n        .toArray(out ?? new Float32Array(4));\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyTint\n * @deprecated since 7.2.0\n * @see PIXI.Color.toPremultiplied\n * @param {number} tint -\n * @param {number} alpha -\n */\nexport function premultiplyTint(tint: number, alpha: number): number\n{\n    // #if _DEBUG\n    deprecation('7.2.0', `utils.premultiplyTint has moved to Color.toPremultiplied`);\n    // #endif\n\n    return Color.shared\n        .setValue(tint)\n        .toPremultiplied(alpha);\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyTintToRgba\n * @deprecated since 7.2.0\n * @see PIXI.Color.premultiply\n * @param {number} tint -\n * @param {number} alpha -\n * @param {Float32Array} [out] -\n * @param {boolean} [premultiply=true] -\n */\nexport function premultiplyTintToRgba(tint: number, alpha: number, out?: Float32Array, premultiply = true): Float32Array\n{\n    // #if _DEBUG\n    deprecation('7.2.0', `utils.premultiplyTintToRgba has moved to Color.premultiply`);\n    // #endif\n\n    return Color.shared\n        .setValue(tint)\n        .premultiply(alpha, premultiply)\n        .toArray(out ?? new Float32Array(4));\n}\n"],"names":["BLEND_MODES","deprecation","Color"],"mappings":";;;;;;;;AAWA,SACA,0BAAA,GAAA;AACI,EAAA,MAAM,KAAK,EAAC,CAAA;AACZ,EAAA,MAAM,MAAM,EAAC,CAAA;AAEb,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,EAAA,EAAI,CACxB,EAAA,EAAA;AACI,IAAA,EAAA,CAAG,CAAK,CAAA,GAAA,CAAA,CAAA;AACR,IAAA,GAAA,CAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACb;AAEA,EAAG,EAAA,CAAAA,qBAAA,CAAY,cAAcA,qBAAY,CAAA,MAAA,CAAA;AACzC,EAAG,EAAA,CAAAA,qBAAA,CAAY,WAAWA,qBAAY,CAAA,GAAA,CAAA;AACtC,EAAG,EAAA,CAAAA,qBAAA,CAAY,cAAcA,qBAAY,CAAA,MAAA,CAAA;AAEzC,EAAI,GAAA,CAAAA,qBAAA,CAAY,UAAUA,qBAAY,CAAA,UAAA,CAAA;AACtC,EAAI,GAAA,CAAAA,qBAAA,CAAY,OAAOA,qBAAY,CAAA,OAAA,CAAA;AACnC,EAAI,GAAA,CAAAA,qBAAA,CAAY,UAAUA,qBAAY,CAAA,UAAA,CAAA;AAEtC,EAAA,MAAM,QAAoB,EAAC,CAAA;AAE3B,EAAA,KAAA,CAAM,KAAK,GAAG,CAAA,CAAA;AACd,EAAA,KAAA,CAAM,KAAK,EAAE,CAAA,CAAA;AAEb,EAAO,OAAA,KAAA,CAAA;AACX,CAAA;AAOO,MAAM,uBAAuB,0BAA2B,GAAA;AAUxD,SAAA,gBAAA,CAA0B,WAAmB,aACpD,EAAA;AACI,EAAO,OAAA,oBAAA,CAAqB,aAAgB,GAAA,CAAA,GAAI,CAAG,CAAA,CAAA,SAAA,CAAA,CAAA;AACvD,CAAA;AAYO,SAAA,eAAA,CACH,GACA,EAAA,KAAA,EACA,GACA,EAAA,WAAA,GAAc,IAElB,EAAA;AAEI,EAAAC,uBAAA,CAAY,SAAS,CAAsD,oDAAA,CAAA,CAAA,CAAA;AAG3E,EAAA,OAAOC,WAAM,CAAA,MAAA,CACR,QAAS,CAAA,GAAG,EACZ,WAAY,CAAA,KAAA,EAAO,WAAW,CAAA,CAC9B,OAAQ,CAAA,GAAA,IAAO,IAAI,YAAA,CAAa,CAAC,CAAC,CAAA,CAAA;AAC3C,CAAA;AAUO,SAAA,eAAA,CAAyB,MAAc,KAC9C,EAAA;AAEI,EAAAD,uBAAA,CAAY,SAAS,CAA0D,wDAAA,CAAA,CAAA,CAAA;AAG/E,EAAA,OAAOC,YAAM,MACR,CAAA,QAAA,CAAS,IAAI,CAAA,CACb,gBAAgB,KAAK,CAAA,CAAA;AAC9B,CAAA;AAYO,SAAA,qBAAA,CAA+B,IAAc,EAAA,KAAA,EAAe,GAAoB,EAAA,WAAA,GAAc,IACrG,EAAA;AAEI,EAAAD,uBAAA,CAAY,SAAS,CAA4D,0DAAA,CAAA,CAAA,CAAA;AAGjF,EAAA,OAAOC,WAAM,CAAA,MAAA,CACR,QAAS,CAAA,IAAI,EACb,WAAY,CAAA,KAAA,EAAO,WAAW,CAAA,CAC9B,OAAQ,CAAA,GAAA,IAAO,IAAI,YAAA,CAAa,CAAC,CAAC,CAAA,CAAA;AAC3C;;;;;;;;"}