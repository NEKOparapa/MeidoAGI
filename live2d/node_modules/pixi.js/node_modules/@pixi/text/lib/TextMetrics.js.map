{"version":3,"file":"TextMetrics.js","sources":["../src/TextMetrics.ts"],"sourcesContent":["import { settings } from '@pixi/core';\n\nimport type { ICanvas, ICanvasRenderingContext2D, ICanvasRenderingContext2DSettings } from '@pixi/core';\nimport type { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\ninterface IFontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: IFontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = TextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = settings.ADAPTER.getCanvasRenderingContext2D().prototype;\n\n            result\n                = TextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see PIXI.TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see PIXI.TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, IFontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    private static __canvas: ICanvas;\n    private static __context: ICanvasRenderingContext2D;\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: ICanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = TextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + (style.strokeThickness * 2))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (TextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = TextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see TextMetrics.graphemeSegmenter\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return TextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        if (width === 0 || height === 0)\n        {\n            TextMetrics._fonts[font] = properties;\n\n            return properties;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!TextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    TextMetrics.__canvas = c;\n\n                    return c;\n                }\n\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            TextMetrics.__canvas = canvas;\n        }\n\n        return TextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!TextMetrics.__context)\n        {\n            TextMetrics.__context = TextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return TextMetrics.__context;\n    }\n}\n"],"names":["settings"],"mappings":";;;;;;AAsDA,MAAM,eAAqD,GAAA;AAAA,EAEvD,kBAAoB,EAAA,IAAA;AACxB,CAAA,CAAA;AAgBO,MAAM,eAAN,MACP;AAAA,EA4EI,WAAkB,kCAClB,GAAA;AACI,IAAA,IAAI,SAAS,YAAY,CAAA,mCAAA,CAAA;AAEzB,IAAA,IAAI,WAAW,KACf,CAAA,EAAA;AACI,MAAA,MAAM,KAAQ,GAAAA,aAAA,CAAS,OAAQ,CAAA,2BAAA,EAA8B,CAAA,SAAA,CAAA;AAE7D,MAAA,MAAA,GACM,YAAY,CAAA,mCAAA,GACZ,eAAmB,IAAA,KAAA,IAAS,mBAAuB,IAAA,KAAA,CAAA;AAAA,KAC7D;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,GACX;AAAA,EAmDA,WAAA,CAAY,MAAc,KAAkB,EAAA,KAAA,EAAe,QAAgB,KAAiB,EAAA,UAAA,EACxF,UAAoB,EAAA,YAAA,EAAsB,cAC9C,EAAA;AACI,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAClB,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAClB,IAAA,IAAA,CAAK,YAAe,GAAA,YAAA,CAAA;AACpB,IAAA,IAAA,CAAK,cAAiB,GAAA,cAAA,CAAA;AAAA,GAC1B;AAAA,EAUA,OAAc,WACV,CAAA,IAAA,EACA,OACA,QACA,EAAA,MAAA,GAAkB,aAAY,OAElC,EAAA;AACI,IAAA,QAAA,GAAY,QAAa,KAAA,KAAA,CAAA,IAAa,QAAa,KAAA,IAAA,GAAQ,MAAM,QAAW,GAAA,QAAA,CAAA;AAC5E,IAAM,MAAA,IAAA,GAAO,MAAM,YAAa,EAAA,CAAA;AAChC,IAAM,MAAA,cAAA,GAAiB,YAAY,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AAInD,IAAI,IAAA,cAAA,CAAe,aAAa,CAChC,EAAA;AACI,MAAA,cAAA,CAAe,WAAW,KAAM,CAAA,QAAA,CAAA;AAChC,MAAA,cAAA,CAAe,SAAS,KAAM,CAAA,QAAA,CAAA;AAAA,KAClC;AAEA,IAAA,MAAM,OAAU,GAAA,MAAA,CAAO,UAAW,CAAA,IAAA,EAAM,eAAe,CAAA,CAAA;AAEvD,IAAA,OAAA,CAAQ,IAAO,GAAA,IAAA,CAAA;AAEf,IAAA,MAAM,aAAa,QAAW,GAAA,YAAA,CAAY,SAAS,IAAM,EAAA,KAAA,EAAO,MAAM,CAAI,GAAA,IAAA,CAAA;AAC1E,IAAM,MAAA,KAAA,GAAQ,UAAW,CAAA,KAAA,CAAM,gBAAgB,CAAA,CAAA;AAC/C,IAAA,MAAM,UAAa,GAAA,IAAI,KAAc,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AACjD,IAAA,IAAI,YAAe,GAAA,CAAA,CAAA;AAEnB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAClC,EAAA,EAAA;AACI,MAAA,MAAM,YAAY,YAAY,CAAA,YAAA,CAAa,MAAM,CAAI,CAAA,EAAA,KAAA,CAAM,eAAe,OAAO,CAAA,CAAA;AAEjF,MAAA,UAAA,CAAW,CAAK,CAAA,GAAA,SAAA,CAAA;AAChB,MAAe,YAAA,GAAA,IAAA,CAAK,GAAI,CAAA,YAAA,EAAc,SAAS,CAAA,CAAA;AAAA,KACnD;AACA,IAAI,IAAA,KAAA,GAAQ,eAAe,KAAM,CAAA,eAAA,CAAA;AAEjC,IAAA,IAAI,MAAM,UACV,EAAA;AACI,MAAA,KAAA,IAAS,KAAM,CAAA,kBAAA,CAAA;AAAA,KACnB;AAEA,IAAA,MAAM,UAAa,GAAA,KAAA,CAAM,UAAc,IAAA,cAAA,CAAe,WAAW,KAAM,CAAA,eAAA,CAAA;AACvE,IAAA,IAAI,MAAS,GAAA,IAAA,CAAK,GAAI,CAAA,UAAA,EAAY,eAAe,QAAY,GAAA,KAAA,CAAM,eAAkB,GAAA,CAAE,CAC/E,GAAA,CAAA,KAAA,CAAM,MAAS,GAAA,CAAA,kBAAmB,KAAM,CAAA,OAAA,CAAA,CAAA;AAEhD,IAAA,IAAI,MAAM,UACV,EAAA;AACI,MAAA,MAAA,IAAU,KAAM,CAAA,kBAAA,CAAA;AAAA,KACpB;AAEA,IAAA,OAAO,IAAI,YAAA,CACP,IACA,EAAA,KAAA,EACA,KACA,EAAA,MAAA,EACA,KACA,EAAA,UAAA,EACA,UAAa,GAAA,KAAA,CAAM,OACnB,EAAA,YAAA,EACA,cACJ,CAAA,CAAA;AAAA,GACJ;AAAA,EAEA,OAAe,YAAA,CACX,IACA,EAAA,aAAA,EACA,OAEJ,EAAA;AACI,IAAA,IAAI,4BAA+B,GAAA,KAAA,CAAA;AAEnC,IAAA,IAAI,aAAY,kCAChB,EAAA;AACI,MAAA,IAAI,aAAY,yBAChB,EAAA;AACI,QAAA,OAAA,CAAQ,gBAAgB,CAAG,EAAA,aAAA,CAAA,EAAA,CAAA,CAAA;AAC3B,QAAA,OAAA,CAAQ,oBAAoB,CAAG,EAAA,aAAA,CAAA,EAAA,CAAA,CAAA;AAC/B,QAA+B,4BAAA,GAAA,IAAA,CAAA;AAAA,OAGnC,MAAA;AACI,QAAA,OAAA,CAAQ,aAAgB,GAAA,KAAA,CAAA;AACxB,QAAA,OAAA,CAAQ,iBAAoB,GAAA,KAAA,CAAA;AAAA,OAChC;AAAA,KACJ;AAEA,IAAA,IAAI,KAAQ,GAAA,OAAA,CAAQ,WAAY,CAAA,IAAI,CAAE,CAAA,KAAA,CAAA;AAEtC,IAAA,IAAI,QAAQ,CACZ,EAAA;AACI,MAAA,IAAI,4BACJ,EAAA;AACI,QAAS,KAAA,IAAA,aAAA,CAAA;AAAA,OAGb,MAAA;AACI,QAAA,KAAA,IAAU,CAAY,YAAA,CAAA,iBAAA,CAAkB,IAAI,CAAA,CAAE,SAAS,CAAK,IAAA,aAAA,CAAA;AAAA,OAChE;AAAA,KACJ;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAUA,OAAe,QACX,CAAA,IAAA,EACA,KACA,EAAA,MAAA,GAAkB,aAAY,OAElC,EAAA;AACI,IAAA,MAAM,OAAU,GAAA,MAAA,CAAO,UAAW,CAAA,IAAA,EAAM,eAAe,CAAA,CAAA;AAEvD,IAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AACZ,IAAA,IAAI,IAAO,GAAA,EAAA,CAAA;AACX,IAAA,IAAI,KAAQ,GAAA,EAAA,CAAA;AAEZ,IAAM,MAAA,KAAA,mBAAoC,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACrD,IAAM,MAAA,EAAE,eAAe,UAAe,EAAA,GAAA,KAAA,CAAA;AAGtC,IAAM,MAAA,cAAA,GAAiB,YAAY,CAAA,cAAA,CAAe,UAAU,CAAA,CAAA;AAC5D,IAAM,MAAA,gBAAA,GAAmB,YAAY,CAAA,gBAAA,CAAiB,UAAU,CAAA,CAAA;AAGhE,IAAA,IAAI,mBAAmB,CAAC,cAAA,CAAA;AAQxB,IAAM,MAAA,aAAA,GAAgB,MAAM,aAAgB,GAAA,aAAA,CAAA;AAG5C,IAAM,MAAA,MAAA,GAAS,YAAY,CAAA,QAAA,CAAS,IAAI,CAAA,CAAA;AAExC,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,CAAO,QAAQ,CACnC,EAAA,EAAA;AAEI,MAAA,IAAI,QAAQ,MAAO,CAAA,CAAA,CAAA,CAAA;AAGnB,MAAI,IAAA,YAAA,CAAY,SAAU,CAAA,KAAK,CAC/B,EAAA;AAEI,QAAA,IAAI,CAAC,gBACL,EAAA;AACI,UAAS,KAAA,IAAA,YAAA,CAAY,QAAQ,IAAI,CAAA,CAAA;AACjC,UAAA,gBAAA,GAAmB,CAAC,cAAA,CAAA;AACpB,UAAO,IAAA,GAAA,EAAA,CAAA;AACP,UAAQ,KAAA,GAAA,CAAA,CAAA;AACR,UAAA,SAAA;AAAA,SACJ;AAIA,QAAQ,KAAA,GAAA,GAAA,CAAA;AAAA,OACZ;AAGA,MAAA,IAAI,cACJ,EAAA;AAEI,QAAM,MAAA,mBAAA,GAAsB,YAAY,CAAA,eAAA,CAAgB,KAAK,CAAA,CAAA;AAC7D,QAAA,MAAM,sBAAsB,YAAY,CAAA,eAAA,CAAgB,IAAK,CAAA,IAAA,CAAK,SAAS,CAAE,CAAA,CAAA,CAAA;AAE7E,QAAA,IAAI,uBAAuB,mBAC3B,EAAA;AACI,UAAA,SAAA;AAAA,SACJ;AAAA,OACJ;AAGA,MAAA,MAAM,aAAa,YAAY,CAAA,YAAA,CAAa,KAAO,EAAA,aAAA,EAAe,OAAO,OAAO,CAAA,CAAA;AAGhF,MAAA,IAAI,aAAa,aACjB,EAAA;AAEI,QAAA,IAAI,SAAS,EACb,EAAA;AAEI,UAAS,KAAA,IAAA,YAAA,CAAY,QAAQ,IAAI,CAAA,CAAA;AACjC,UAAO,IAAA,GAAA,EAAA,CAAA;AACP,UAAQ,KAAA,GAAA,CAAA,CAAA;AAAA,SACZ;AAGA,QAAA,IAAI,YAAY,CAAA,aAAA,CAAc,KAAO,EAAA,KAAA,CAAM,UAAU,CACrD,EAAA;AAEI,UAAM,MAAA,UAAA,GAAa,YAAY,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AAGlD,UAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,CAAW,QAAQ,CACvC,EAAA,EAAA;AACI,YAAA,IAAI,OAAO,UAAW,CAAA,CAAA,CAAA,CAAA;AACtB,YAAA,IAAI,QAAW,GAAA,IAAA,CAAA;AAEf,YAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AAGR,YAAO,OAAA,UAAA,CAAW,IAAI,CACtB,CAAA,EAAA;AACI,cAAM,MAAA,QAAA,GAAW,WAAW,CAAI,GAAA,CAAA,CAAA,CAAA;AAGhC,cAAI,IAAA,CAAC,aAAY,aAAc,CAAA,QAAA,EAAU,UAAU,KAAO,EAAA,CAAA,EAAG,KAAM,CAAA,UAAU,CAC7E,EAAA;AAEI,gBAAQ,IAAA,IAAA,QAAA,CAAA;AAAA,eAGZ,MAAA;AACI,gBAAA,MAAA;AAAA,eACJ;AAEA,cAAW,QAAA,GAAA,QAAA,CAAA;AACX,cAAA,CAAA,EAAA,CAAA;AAAA,aACJ;AAEA,YAAA,CAAA,IAAK,CAAI,GAAA,CAAA,CAAA;AAET,YAAA,MAAM,iBAAiB,YAAY,CAAA,YAAA,CAAa,IAAM,EAAA,aAAA,EAAe,OAAO,OAAO,CAAA,CAAA;AAEnF,YAAI,IAAA,cAAA,GAAiB,QAAQ,aAC7B,EAAA;AACI,cAAS,KAAA,IAAA,YAAA,CAAY,QAAQ,IAAI,CAAA,CAAA;AACjC,cAAmB,gBAAA,GAAA,KAAA,CAAA;AACnB,cAAO,IAAA,GAAA,EAAA,CAAA;AACP,cAAQ,KAAA,GAAA,CAAA,CAAA;AAAA,aACZ;AAEA,YAAQ,IAAA,IAAA,IAAA,CAAA;AACR,YAAS,KAAA,IAAA,cAAA,CAAA;AAAA,WACb;AAAA,SAKJ,MAAA;AAGI,UAAI,IAAA,IAAA,CAAK,SAAS,CAClB,EAAA;AACI,YAAS,KAAA,IAAA,YAAA,CAAY,QAAQ,IAAI,CAAA,CAAA;AACjC,YAAO,IAAA,GAAA,EAAA,CAAA;AACP,YAAQ,KAAA,GAAA,CAAA,CAAA;AAAA,WACZ;AAEA,UAAM,MAAA,WAAA,GAAc,CAAM,KAAA,MAAA,CAAO,MAAS,GAAA,CAAA,CAAA;AAG1C,UAAA,KAAA,IAAS,YAAY,CAAA,OAAA,CAAQ,KAAO,EAAA,CAAC,WAAW,CAAA,CAAA;AAChD,UAAmB,gBAAA,GAAA,KAAA,CAAA;AACnB,UAAO,IAAA,GAAA,EAAA,CAAA;AACP,UAAQ,KAAA,GAAA,CAAA,CAAA;AAAA,SACZ;AAAA,OAKJ,MAAA;AAGI,QAAI,IAAA,UAAA,GAAa,QAAQ,aACzB,EAAA;AAEI,UAAmB,gBAAA,GAAA,KAAA,CAAA;AAGnB,UAAS,KAAA,IAAA,YAAA,CAAY,QAAQ,IAAI,CAAA,CAAA;AAGjC,UAAO,IAAA,GAAA,EAAA,CAAA;AACP,UAAQ,KAAA,GAAA,CAAA,CAAA;AAAA,SACZ;AAGA,QAAI,IAAA,IAAA,CAAK,SAAS,CAAK,IAAA,CAAC,aAAY,eAAgB,CAAA,KAAK,KAAK,gBAC9D,EAAA;AAEI,UAAQ,IAAA,IAAA,KAAA,CAAA;AAGR,UAAS,KAAA,IAAA,UAAA,CAAA;AAAA,SACb;AAAA,OACJ;AAAA,KACJ;AAEA,IAAS,KAAA,IAAA,YAAA,CAAY,OAAQ,CAAA,IAAA,EAAM,KAAK,CAAA,CAAA;AAExC,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAQA,OAAe,OAAA,CAAQ,IAAc,EAAA,OAAA,GAAU,IAC/C,EAAA;AACI,IAAO,IAAA,GAAA,YAAA,CAAY,UAAU,IAAI,CAAA,CAAA;AAEjC,IAAA,IAAA,GAAQ,UAAW,CAAG,EAAA,IAAA,CAAA;AAAA,CAAW,GAAA,IAAA,CAAA;AAEjC,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAUA,OAAe,YAAA,CAAa,GAAa,EAAA,aAAA,EAAuB,OAC5D,OACJ,EAAA;AACI,IAAA,IAAI,QAAQ,KAAM,CAAA,GAAA,CAAA,CAAA;AAElB,IAAI,IAAA,OAAO,UAAU,QACrB,EAAA;AACI,MAAA,KAAA,GAAQ,YAAY,CAAA,YAAA,CAAa,GAAK,EAAA,aAAA,EAAe,OAAO,CAAI,GAAA,aAAA,CAAA;AAChE,MAAA,KAAA,CAAM,GAAO,CAAA,GAAA,KAAA,CAAA;AAAA,KACjB;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAOA,OAAe,eAAe,UAC9B,EAAA;AACI,IAAQ,OAAA,UAAA,KAAe,YAAY,UAAe,KAAA,UAAA,CAAA;AAAA,GACtD;AAAA,EAOA,OAAe,iBAAiB,UAChC,EAAA;AACI,IAAA,OAAQ,UAAe,KAAA,QAAA,CAAA;AAAA,GAC3B;AAAA,EAOA,OAAe,UAAU,IACzB,EAAA;AACI,IAAI,IAAA,OAAO,SAAS,QACpB,EAAA;AACI,MAAO,OAAA,EAAA,CAAA;AAAA,KACX;AAEA,IAAA,KAAA,IAAS,IAAI,IAAK,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CACtC,EAAA,EAAA;AACI,MAAA,MAAM,OAAO,IAAK,CAAA,CAAA,CAAA,CAAA;AAElB,MAAA,IAAI,CAAC,YAAA,CAAY,eAAgB,CAAA,IAAI,CACrC,EAAA;AACI,QAAA,MAAA;AAAA,OACJ;AAEA,MAAO,IAAA,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA,CAAA;AAAA,KAC3B;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAOA,OAAe,UAAU,IACzB,EAAA;AACI,IAAI,IAAA,OAAO,SAAS,QACpB,EAAA;AACI,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AAEA,IAAA,OAAO,aAAY,SAAU,CAAA,QAAA,CAAS,IAAK,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,CAAA;AAAA,GAC5D;AAAA,EAYA,OAAO,eAAgB,CAAA,IAAA,EAAc,SACrC,EAAA;AACI,IAAI,IAAA,OAAO,SAAS,QACpB,EAAA;AACI,MAAO,OAAA,KAAA,CAAA;AAAA,KACX;AAEA,IAAA,OAAO,aAAY,eAAgB,CAAA,QAAA,CAAS,IAAK,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,CAAA;AAAA,GAClE;AAAA,EAOA,OAAe,SAAS,IACxB,EAAA;AACI,IAAA,MAAM,SAAmB,EAAC,CAAA;AAC1B,IAAA,IAAI,KAAQ,GAAA,EAAA,CAAA;AAEZ,IAAI,IAAA,OAAO,SAAS,QACpB,EAAA;AACI,MAAO,OAAA,MAAA,CAAA;AAAA,KACX;AAEA,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,QAAQ,CACjC,EAAA,EAAA;AACI,MAAA,MAAM,OAAO,IAAK,CAAA,CAAA,CAAA,CAAA;AAClB,MAAM,MAAA,QAAA,GAAW,KAAK,CAAI,GAAA,CAAA,CAAA,CAAA;AAE1B,MAAI,IAAA,YAAA,CAAY,gBAAgB,IAAM,EAAA,QAAQ,KAAK,YAAY,CAAA,SAAA,CAAU,IAAI,CAC7E,EAAA;AACI,QAAA,IAAI,UAAU,EACd,EAAA;AACI,UAAA,MAAA,CAAO,KAAK,KAAK,CAAA,CAAA;AACjB,UAAQ,KAAA,GAAA,EAAA,CAAA;AAAA,SACZ;AAEA,QAAA,MAAA,CAAO,KAAK,IAAI,CAAA,CAAA;AAEhB,QAAA,SAAA;AAAA,OACJ;AAEA,MAAS,KAAA,IAAA,IAAA,CAAA;AAAA,KACb;AAEA,IAAA,IAAI,UAAU,EACd,EAAA;AACI,MAAA,MAAA,CAAO,KAAK,KAAK,CAAA,CAAA;AAAA,KACrB;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,GACX;AAAA,EAYA,OAAO,aAAc,CAAA,MAAA,EAAgB,UACrC,EAAA;AACI,IAAO,OAAA,UAAA,CAAA;AAAA,GACX;AAAA,EAgBA,OAAO,aAAc,CAAA,KAAA,EAAe,SAAmB,EAAA,MAAA,EAAgB,QACnE,WACJ,EAAA;AACI,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAYA,OAAO,cAAc,KACrB,EAAA;AACI,IAAO,OAAA,YAAA,CAAY,kBAAkB,KAAK,CAAA,CAAA;AAAA,GAC9C;AAAA,EAOA,OAAc,YAAY,IAC1B,EAAA;AAEI,IAAI,IAAA,YAAA,CAAY,OAAO,IACvB,CAAA,EAAA;AACI,MAAA,OAAO,aAAY,MAAO,CAAA,IAAA,CAAA,CAAA;AAAA,KAC9B;AAEA,IAAA,MAAM,UAA2B,GAAA;AAAA,MAC7B,MAAQ,EAAA,CAAA;AAAA,MACR,OAAS,EAAA,CAAA;AAAA,MACT,QAAU,EAAA,CAAA;AAAA,KACd,CAAA;AAEA,IAAA,MAAM,SAAS,YAAY,CAAA,OAAA,CAAA;AAC3B,IAAA,MAAM,UAAU,YAAY,CAAA,QAAA,CAAA;AAE5B,IAAA,OAAA,CAAQ,IAAO,GAAA,IAAA,CAAA;AAEf,IAAM,MAAA,aAAA,GAAgB,YAAY,CAAA,cAAA,GAAiB,YAAY,CAAA,eAAA,CAAA;AAC/D,IAAA,MAAM,QAAQ,IAAK,CAAA,IAAA,CAAK,QAAQ,WAAY,CAAA,aAAa,EAAE,KAAK,CAAA,CAAA;AAChE,IAAI,IAAA,QAAA,GAAW,KAAK,IAAK,CAAA,OAAA,CAAQ,YAAY,YAAY,CAAA,eAAe,EAAE,KAAK,CAAA,CAAA;AAC/E,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,YAAA,CAAY,oBAAoB,QAAQ,CAAA,CAAA;AAEjE,IAAW,QAAA,GAAA,QAAA,GAAW,aAAY,mBAAsB,GAAA,CAAA,CAAA;AAExD,IAAI,IAAA,KAAA,KAAU,CAAK,IAAA,MAAA,KAAW,CAC9B,EAAA;AACI,MAAA,YAAA,CAAY,OAAO,IAAQ,CAAA,GAAA,UAAA,CAAA;AAE3B,MAAO,OAAA,UAAA,CAAA;AAAA,KACX;AAEA,IAAA,MAAA,CAAO,KAAQ,GAAA,KAAA,CAAA;AACf,IAAA,MAAA,CAAO,MAAS,GAAA,MAAA,CAAA;AAEhB,IAAA,OAAA,CAAQ,SAAY,GAAA,MAAA,CAAA;AACpB,IAAA,OAAA,CAAQ,QAAS,CAAA,CAAA,EAAG,CAAG,EAAA,KAAA,EAAO,MAAM,CAAA,CAAA;AAEpC,IAAA,OAAA,CAAQ,IAAO,GAAA,IAAA,CAAA;AAEf,IAAA,OAAA,CAAQ,YAAe,GAAA,YAAA,CAAA;AACvB,IAAA,OAAA,CAAQ,SAAY,GAAA,MAAA,CAAA;AACpB,IAAQ,OAAA,CAAA,QAAA,CAAS,aAAe,EAAA,CAAA,EAAG,QAAQ,CAAA,CAAA;AAE3C,IAAA,MAAM,YAAY,OAAQ,CAAA,YAAA,CAAa,GAAG,CAAG,EAAA,KAAA,EAAO,MAAM,CAAE,CAAA,IAAA,CAAA;AAC5D,IAAA,MAAM,SAAS,SAAU,CAAA,MAAA,CAAA;AACzB,IAAA,MAAM,OAAO,KAAQ,GAAA,CAAA,CAAA;AAErB,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,IAAI,GAAM,GAAA,CAAA,CAAA;AACV,IAAA,IAAI,IAAO,GAAA,KAAA,CAAA;AAGX,IAAA,KAAK,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,EAAU,EAAE,CAC5B,EAAA;AACI,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,EAAM,KAAK,CAC/B,EAAA;AACI,QAAI,IAAA,SAAA,CAAU,GAAM,GAAA,CAAA,CAAA,KAAO,GAC3B,EAAA;AACI,UAAO,IAAA,GAAA,IAAA,CAAA;AACP,UAAA,MAAA;AAAA,SACJ;AAAA,OACJ;AACA,MAAA,IAAI,CAAC,IACL,EAAA;AACI,QAAO,GAAA,IAAA,IAAA,CAAA;AAAA,OAGX,MAAA;AACI,QAAA,MAAA;AAAA,OACJ;AAAA,KACJ;AAEA,IAAA,UAAA,CAAW,SAAS,QAAW,GAAA,CAAA,CAAA;AAE/B,IAAA,GAAA,GAAM,MAAS,GAAA,IAAA,CAAA;AACf,IAAO,IAAA,GAAA,KAAA,CAAA;AAGP,IAAA,KAAK,CAAI,GAAA,MAAA,EAAQ,CAAI,GAAA,QAAA,EAAU,EAAE,CACjC,EAAA;AACI,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,EAAM,KAAK,CAC/B,EAAA;AACI,QAAI,IAAA,SAAA,CAAU,GAAM,GAAA,CAAA,CAAA,KAAO,GAC3B,EAAA;AACI,UAAO,IAAA,GAAA,IAAA,CAAA;AACP,UAAA,MAAA;AAAA,SACJ;AAAA,OACJ;AAEA,MAAA,IAAI,CAAC,IACL,EAAA;AACI,QAAO,GAAA,IAAA,IAAA,CAAA;AAAA,OAGX,MAAA;AACI,QAAA,MAAA;AAAA,OACJ;AAAA,KACJ;AAEA,IAAA,UAAA,CAAW,UAAU,CAAI,GAAA,QAAA,CAAA;AACzB,IAAW,UAAA,CAAA,QAAA,GAAW,UAAW,CAAA,MAAA,GAAS,UAAW,CAAA,OAAA,CAAA;AAErD,IAAA,YAAA,CAAY,OAAO,IAAQ,CAAA,GAAA,UAAA,CAAA;AAE3B,IAAO,OAAA,UAAA,CAAA;AAAA,GACX;AAAA,EAMA,OAAc,YAAa,CAAA,IAAA,GAAO,EAClC,EAAA;AACI,IAAA,IAAI,IACJ,EAAA;AACI,MAAA,OAAO,aAAY,MAAO,CAAA,IAAA,CAAA,CAAA;AAAA,KAG9B,MAAA;AACI,MAAA,YAAA,CAAY,SAAS,EAAC,CAAA;AAAA,KAC1B;AAAA,GACJ;AAAA,EAOA,WAAkB,OAClB,GAAA;AACI,IAAI,IAAA,CAAC,aAAY,QACjB,EAAA;AACI,MAAI,IAAA,MAAA,CAAA;AAEJ,MACA,IAAA;AAEI,QAAA,MAAM,CAAI,GAAA,IAAI,eAAgB,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAClC,QAAA,MAAM,OAAU,GAAA,CAAA,CAAE,UAAW,CAAA,IAAA,EAAM,eAAe,CAAA,CAAA;AAElD,QAAA,IAAI,SAAS,WACb,EAAA;AACI,UAAA,YAAA,CAAY,QAAW,GAAA,CAAA,CAAA;AAEvB,UAAO,OAAA,CAAA,CAAA;AAAA,SACX;AAEA,QAAS,MAAA,GAAAA,aAAA,CAAS,QAAQ,YAAa,EAAA,CAAA;AAAA,eAEpC,EAAP,EAAA;AAEI,QAAS,MAAA,GAAAA,aAAA,CAAS,QAAQ,YAAa,EAAA,CAAA;AAAA,OAC3C;AACA,MAAO,MAAA,CAAA,KAAA,GAAQ,OAAO,MAAS,GAAA,EAAA,CAAA;AAC/B,MAAA,YAAA,CAAY,QAAW,GAAA,MAAA,CAAA;AAAA,KAC3B;AAEA,IAAA,OAAO,YAAY,CAAA,QAAA,CAAA;AAAA,GACvB;AAAA,EAMA,WAAkB,QAClB,GAAA;AACI,IAAI,IAAA,CAAC,aAAY,SACjB,EAAA;AACI,MAAA,YAAA,CAAY,SAAY,GAAA,YAAA,CAAY,OAAQ,CAAA,UAAA,CAAW,MAAM,eAAe,CAAA,CAAA;AAAA,KAChF;AAEA,IAAA,OAAO,YAAY,CAAA,SAAA,CAAA;AAAA,GACvB;AACJ,CAAA,CAAA;AA71BO,IAAM,WAAN,GAAA,aAAA;AAAM,YAiCK,cAAiB,GAAA,YAAA,CAAA;AAjCtB,YAoCK,eAAkB,GAAA,GAAA,CAAA;AApCvB,YAuCK,mBAAsB,GAAA,GAAA,CAAA;AAvC3B,YA0CK,iBAAoB,GAAA,CAAA,CAAA;AAalC,WAvDS,CAuDK,oBAA8C,CAC5D,MAAA;AACI,EAAI,IAAA,OAAQ,IAAgB,EAAA,SAAA,KAAc,UAC1C,EAAA;AACI,IAAM,MAAA,SAAA,GAAY,IAAK,IAAA,CAAe,SAAU,EAAA,CAAA;AAEhD,IAAA,OAAO,CAAC,CAAA,KAAc,CAAC,GAAG,SAAU,CAAA,OAAA,CAAQ,CAAC,CAAC,CAAE,CAAA,GAAA,CAAI,CAAC,CAAA,KAAM,EAAE,OAAO,CAAA,CAAA;AAAA,GACxE;AAEA,EAAA,OAAO,CAAC,CAAA,KAAc,CAAC,GAAG,CAAC,CAAA,CAAA;AAC/B,CAAG,GAAA,CAAA;AAjEM,YAmGK,yBAA4B,GAAA,KAAA,CAAA;AAG1C,WAtGS,CAsGM,SAAuC,EAAC,CAAA;AAtG9C,YAyGM,SAAsB,GAAA;AAAA,EACjC,EAAA;AAAA,EACA,EAAA;AACJ,CAAA,CAAA;AA5GS,YA+GM,eAA4B,GAAA;AAAA,EACvC,CAAA;AAAA,EACA,EAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AACJ,CAAA;;;;"}