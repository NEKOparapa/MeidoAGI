{"version":3,"file":"BlobResource.js","sources":["../../src/resources/BlobResource.ts"],"sourcesContent":["import { BufferResource, ViewableBuffer } from '@pixi/core';\n\ninterface IBlobOptions\n{\n    autoLoad?: boolean;\n    width: number;\n    height: number;\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nexport abstract class BlobResource extends BufferResource\n{\n    protected origin: string | null;\n    protected buffer: ViewableBuffer | null;\n    protected loaded: boolean;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<this>;\n\n    /**\n     * @param source - the buffer/URL of the texture file\n     * @param {PIXI.IBlobOptions} options\n     * @param {boolean}[options.autoLoad] - whether to fetch the data immediately;\n     *  you can fetch it later via {@link PIXI.BlobResource#load}\n     * @param {boolean}[options.width] - the width in pixels.\n     * @param {boolean}[options.height] - the height in pixels.\n     */\n    constructor(source: string | Uint8Array | Uint32Array | Float32Array | null,\n        options: IBlobOptions = { width: 1, height: 1, autoLoad: true })\n    {\n        let origin: string | null;\n        let data: Uint8Array | Uint32Array | Float32Array;\n\n        if (typeof source === 'string')\n        {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else\n        {\n            origin = null;\n            data = source;\n        }\n\n        super(data, options);\n\n        /**\n         * The URL of the texture file\n         * @type {string|null}\n         */\n        this.origin = origin;\n\n        /**\n         * The viewable buffer on the data\n         * @type {ViewableBuffer|null}\n         */\n        // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n        this.buffer = data ? new ViewableBuffer(data) : null;\n\n        this._load = null;\n        this.loaded = false;\n\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (this.origin !== null && options.autoLoad !== false)\n        {\n            this.load();\n        }\n        if (this.origin === null && this.buffer)\n        {\n            this._load = Promise.resolve(this);\n            this.loaded = true;\n            this.onBlobLoaded(this.buffer.rawBinaryData);\n        }\n    }\n\n    protected onBlobLoaded(_data: ArrayBuffer): void\n    {\n        // TODO: Override this method\n    }\n\n    /** Loads the blob */\n    load(): Promise<this>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        this._load = fetch(this.origin)\n            .then((response) => response.blob())\n            .then((blob) => blob.arrayBuffer())\n            .then((arrayBuffer) =>\n            {\n                this.data = new Uint32Array(arrayBuffer);\n                this.buffer = new ViewableBuffer(arrayBuffer);\n                this.loaded = true;\n\n                this.onBlobLoaded(arrayBuffer);\n                this.update();\n\n                return this;\n            });\n\n        return this._load;\n    }\n}\n"],"names":["BufferResource","ViewableBuffer"],"mappings":";;;;;;AAeO,MAAe,qBAAqBA,mBAC3C,CAAA;AAAA,EAmBI,WAAA,CAAY,MACR,EAAA,OAAA,GAAwB,EAAE,KAAA,EAAO,GAAG,MAAQ,EAAA,CAAA,EAAG,QAAU,EAAA,IAAA,EAC7D,EAAA;AACI,IAAI,IAAA,MAAA,CAAA;AACJ,IAAI,IAAA,IAAA,CAAA;AAEJ,IAAI,IAAA,OAAO,WAAW,QACtB,EAAA;AACI,MAAS,MAAA,GAAA,MAAA,CAAA;AACT,MAAA,IAAA,GAAO,IAAI,UAAW,EAAA,CAAA;AAAA,KAG1B,MAAA;AACI,MAAS,MAAA,GAAA,IAAA,CAAA;AACT,MAAO,IAAA,GAAA,MAAA,CAAA;AAAA,KACX;AAEA,IAAA,KAAA,CAAM,MAAM,OAAO,CAAA,CAAA;AAMnB,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AAOd,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,GAAO,IAAIC,mBAAA,CAAe,IAAI,CAAI,GAAA,IAAA,CAAA;AAEhD,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AAGd,IAAA,IAAI,IAAK,CAAA,MAAA,KAAW,IAAQ,IAAA,OAAA,CAAQ,aAAa,KACjD,EAAA;AACI,MAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAAA,KACd;AACA,IAAA,IAAI,IAAK,CAAA,MAAA,KAAW,IAAQ,IAAA,IAAA,CAAK,MACjC,EAAA;AACI,MAAK,IAAA,CAAA,KAAA,GAAQ,OAAQ,CAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AACjC,MAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AACd,MAAK,IAAA,CAAA,YAAA,CAAa,IAAK,CAAA,MAAA,CAAO,aAAa,CAAA,CAAA;AAAA,KAC/C;AAAA,GACJ;AAAA,EAEU,aAAa,KACvB,EAAA;AAAA,GAEA;AAAA,EAGA,IACA,GAAA;AACI,IAAA,IAAI,KAAK,KACT,EAAA;AACI,MAAA,OAAO,IAAK,CAAA,KAAA,CAAA;AAAA,KAChB;AAEA,IAAK,IAAA,CAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,MAAM,EACzB,IAAK,CAAA,CAAC,aAAa,QAAS,CAAA,IAAA,EAAM,CAClC,CAAA,IAAA,CAAK,CAAC,IAAS,KAAA,IAAA,CAAK,aAAa,CAAA,CACjC,IAAK,CAAA,CAAC,WACP,KAAA;AACI,MAAK,IAAA,CAAA,IAAA,GAAO,IAAI,WAAA,CAAY,WAAW,CAAA,CAAA;AACvC,MAAK,IAAA,CAAA,MAAA,GAAS,IAAIA,mBAAA,CAAe,WAAW,CAAA,CAAA;AAC5C,MAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAEd,MAAA,IAAA,CAAK,aAAa,WAAW,CAAA,CAAA;AAC7B,MAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAEZ,MAAO,OAAA,IAAA,CAAA;AAAA,KACV,CAAA,CAAA;AAEL,IAAA,OAAO,IAAK,CAAA,KAAA,CAAA;AAAA,GAChB;AACJ;;;;"}